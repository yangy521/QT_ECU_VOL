<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ZJZHONGLI_DGC_LOGIC_ECU_240625_T07.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ZJZHONGLI_DGC_LOGIC_ECU_240625_T07.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Sun Sep 29 10:10:51 2024
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vCanRevProc &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[137]">_IQ24div</a>
 <LI><a href="#[93]">_IQ24mpy</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4b]">ADC2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">ADC2_IRQHandler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC0_1_IRQHandler</a> from gd32f30x_it.o(.text.ADC0_1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from gd32f30x_it.o(.text.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5e]">ConsumerHearbeatAlarm</a> from lifegrd.o(.text.ConsumerHearbeatAlarm) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[5e]">ConsumerHearbeatAlarm</a> from lifegrd.o(.text.ConsumerHearbeatAlarm) referenced 2 times from lifegrd.o(.text.proceedNODE_GUARD)
 <LI><a href="#[27]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel3_IRQHandler</a> from uartcom.o(.text.DMA0_Channel3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel6_IRQHandler</a> from uartcom.o(.text.DMA0_Channel6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[54]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[55]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[56]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[57]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from gd32f30x_it.o(.text.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">EXTI10_15_IRQHandler</a> from gd32f30x_it.o(.text.EXTI10_15_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from gd32f30x_it.o(.text.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1d]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from gd32f30x_it.o(.text.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from gd32f30x_it.o(.text.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[63]">OnCOB_ID_SyncUpdate</a> from sync.o(.text.OnCOB_ID_SyncUpdate) referenced 2 times from sync.o(.text.startSYNC)
 <LI><a href="#[5d]">OnHeartbeatProducerUpdate</a> from lifegrd.o(.text.OnHeartbeatProducerUpdate) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[5c]">OnNumberOfErrorsUpdate</a> from emcy.o(.text.OnNumberOfErrorsUpdate) referenced 2 times from emcy.o(.text.emergencyInit)
 <LI><a href="#[61]">PDOEventTimerAlarm</a> from pdo.o(.text.PDOEventTimerAlarm) referenced 2 times from pdo.o(.text.sendOnePDOevent)
 <LI><a href="#[62]">PDOInhibitTimerAlarm</a> from pdo.o(.text.PDOInhibitTimerAlarm) referenced 2 times from pdo.o(.text.sendOnePDOevent)
 <LI><a href="#[1a]">PendSV_Handler</a> from gd32f30x_it.o(.text.PendSV_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5f]">ProducerHearbeatAlarm</a> from lifegrd.o(.text.ProducerHearbeatAlarm) referenced 2 times from lifegrd.o(.text.heartbeatInit)
 <LI><a href="#[69]">PropDriverPwmUpdate</a> from drvpwm.o(.text.PropDriverPwmUpdate) referenced 2 times from propdriver.o(.text.vPropCurrentLoopAInit)
 <LI><a href="#[21]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[60]">SDOTimeoutAlarm</a> from sdo.o(.text.SDOTimeoutAlarm) referenced 2 times from sdo.o(.text.initSDOline)
 <LI><a href="#[60]">SDOTimeoutAlarm</a> from sdo.o(.text.SDOTimeoutAlarm) referenced 22 times from sdo.o(.text.proceedSDO)
 <LI><a href="#[3f]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4f]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from gd32f30x_it.o(.text.SVC_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[64]">SyncAlarm</a> from sync.o(.text.SyncAlarm) referenced 2 times from sync.o(.text.startSYNC)
 <LI><a href="#[1b]">SysTick_Handler</a> from gd32f30x_it.o(.text.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_gd32f30x.o(.text.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[1e]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">TIMER0_UP_IRQHandler</a> from gd32f30x_it.o(.text.TIMER0_UP_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">TIMER3_IRQHandler</a> from gd32f30x_it.o(.text.TIMER3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4e]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[52]">TIMER5_IRQHandler</a> from stm32_timer_canfestival.o(.text.TIMER5_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[53]">TIMER6_IRQHandler</a> from wdgproc.o(.text.TIMER6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5b]">TPDO_Communication_Parameter_Callback</a> from pdo.o(.text.TPDO_Communication_Parameter_Callback) referenced 2 times from pdo.o(.text.PDOInit)
 <LI><a href="#[b]">TestSlave_scanIndexOD</a> from testslave.o(.text.TestSlave_scanIndexOD) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[1]">TestSlave_valueRangeTest</a> from testslave.o(.text.TestSlave_valueRangeTest) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[50]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">USART0_IRQHandler</a> from uartcom.o(.text.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from uartcom.o(.text.USART1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">USBD_HP_CAN0_TX_IRQHandler</a> from cancom.o(.text.USBD_HP_CAN0_TX_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">USBD_LP_CAN0_RX0_IRQHandler</a> from cancom.o(.text.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from gd32f30x_it.o(.text.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[0]">_RxPDO_EventTimers_Handler</a> from pdo.o(.text._RxPDO_EventTimers_Handler) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[6]">_heartbeatError</a> from lifegrd.o(.text._heartbeatError) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[2]">_initialisation</a> from states.o(.text._initialisation) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[4]">_operational</a> from states.o(.text._operational) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[9]">_post_SlaveBootup</a> from lifegrd.o(.text._post_SlaveBootup) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[a]">_post_SlaveStateChange</a> from lifegrd.o(.text._post_SlaveStateChange) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[8]">_post_TPDO</a> from sync.o(.text._post_TPDO) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[d]">_post_emcy</a> from emcy.o(.text._post_emcy) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[7]">_post_sync</a> from sync.o(.text._post_sync) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[3]">_preOperational</a> from states.o(.text._preOperational) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[5]">_stopped</a> from states.o(.text._stopped) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[c]">_storeODSubIndex</a> from objacces.o(.text._storeODSubIndex) referenced 2 times from testslave.o(.data.TestSlave_Data)
 <LI><a href="#[65]">i32SetPara</a> from para.o(.text.i32SetPara) referenced 2 times from para.o(.text.vParaInit)
 <LI><a href="#[58]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[e]">u32SaveAllPara</a> from testslave.o(.text.u32SaveAllPara) referenced 2 times from testslave.o(.data.TestSlave_Index1010_callbacks)
 <LI><a href="#[10]">u32SaveApplicationPara</a> from testslave.o(.text.u32SaveApplicationPara) referenced 2 times from testslave.o(.data.TestSlave_Index1010_callbacks)
 <LI><a href="#[f]">u32SaveCommunicationPara</a> from testslave.o(.text.u32SaveCommunicationPara) referenced 2 times from testslave.o(.data.TestSlave_Index1010_callbacks)
 <LI><a href="#[11]">u32SaveManufacturerPara</a> from testslave.o(.text.u32SaveManufacturerPara) referenced 2 times from testslave.o(.data.TestSlave_Index1010_callbacks)
 <LI><a href="#[73]">vAiErrCallBack</a> from user_jiali_q20ga.o(.text.vAiErrCallBack) referenced 2 times from user_jiali_q20ga.o(.text.vUserEcuInit)
 <LI><a href="#[74]">vCanId112Proc</a> from user_jiali_q20ga.o(.text.vCanId112Proc) referenced from user_jiali_q20ga.o(.rodata..L__const.vUserEcuInit.CanId112)
 <LI><a href="#[71]">vDoPwmErrCallBack</a> from user_jiali_q20ga.o(.text.vDoPwmErrCallBack) referenced 2 times from user_jiali_q20ga.o(.text.vUserEcuInit)
 <LI><a href="#[6f]">vMstRevProc</a> from user_jiali_q20ga.o(.text.vMstRevProc) referenced 2 times from user_jiali_q20ga.o(.text.vUserEcuInit)
 <LI><a href="#[70]">vMstSendProc</a> from user_jiali_q20ga.o(.text.vMstSendProc) referenced 2 times from user_jiali_q20ga.o(.text.vUserEcuInit)
 <LI><a href="#[66]">vParaSaveStateUpdate</a> from testslave.o(.text.vParaSaveStateUpdate) referenced 2 times from para.o(.text.vParaInit)
 <LI><a href="#[6b]">vPropCurrentFilterCalc</a> from propdriver.o(.text.vPropCurrentFilterCalc) referenced 2 times from propdriver.o(.text.vPropCurrentLoopAInit)
 <LI><a href="#[6a]">vPropCurrentFilterInit</a> from propdriver.o(.text.vPropCurrentFilterInit) referenced 2 times from propdriver.o(.text.vPropCurrentLoopAInit)
 <LI><a href="#[6c]">vPropCurrentLoopAInit</a> from propdriver.o(.text.vPropCurrentLoopAInit) referenced 2 times from propdriver.o(.text.vPropCurrentLoopInit)
 <LI><a href="#[6d]">vPropCurrentLoopCalc</a> from propdriver.o(.text.vPropCurrentLoopCalc) referenced 2 times from propdriver.o(.text.vPropCurrentLoopInit)
 <LI><a href="#[6e]">vPropCurrentLoopReset</a> from propdriver.o(.text.vPropCurrentLoopReset) referenced 2 times from propdriver.o(.text.vPropCurrentLoopInit)
 <LI><a href="#[68]">vPropCurrentPidCalc</a> from propdriver.o(.text.vPropCurrentPidCalc) referenced 2 times from propdriver.o(.text.vPropCurrentLoopAInit)
 <LI><a href="#[67]">vPropCurrentPidInit</a> from propdriver.o(.text.vPropCurrentPidInit) referenced 2 times from propdriver.o(.text.vPropCurrentLoopAInit)
 <LI><a href="#[72]">vPropErrCallBack</a> from user_jiali_q20ga.o(.text.vPropErrCallBack) referenced 2 times from user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[75]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[179]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart1Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart0Send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNumberOfErrorsUpdate
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNetTimerInit
</UL>

<P><STRONG><a name="[79]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[181]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[182]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[183]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[185]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, gd32f30x_it.o(.text.ADC0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC0_1_IRQHandler &rArr; PropCurrentSmooth
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoFdbVoltageCal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pPropCurrentLoopGet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPropCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_data_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PropCurrentSmooth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>BatteryManage</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, batterymeter.o(.text.BatteryManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BatteryManage
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
</UL>

<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = BusFault_Handler &rArr;  BusFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Canopen_int</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32_timer_canfestival.o(.text.Canopen_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Canopen_int &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestSlaveSetObjict
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>ConsumerHearbeatAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lifegrd.o(.text.ConsumerHearbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsumerHearbeatAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lifegrd.o(.text.proceedNODE_GUARD)
<LI> lifegrd.o(.text.heartbeatInit)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, uartcom.o(.text.DMA0_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA0_Channel3_IRQHandler &rArr; vDrvUart0Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetUartSendState
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart0Send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, uartcom.o(.text.DMA0_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA0_Channel6_IRQHandler &rArr; vDrvUart1Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetUartSendState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart1Send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DelAlarm</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer_canfestival.o(.text.DelAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHearbeatAlarm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[44]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.EXTI10_15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = HardFault_Handler &rArr;  HardFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>InitBattery</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, batterymeter.o(.text.InitBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = InitBattery &rArr; WriteLevelToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLevelToEeprom
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLevelFromEeprom
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = MemManage_Handler &rArr;  MemManage_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sync.o(.text.OnCOB_ID_SyncUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text.startSYNC)
</UL>
<P><STRONG><a name="[5d]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lifegrd.o(.text.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text.heartbeatInit)
</UL>
<P><STRONG><a name="[5c]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, emcy.o(.text.OnNumberOfErrorsUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnNumberOfErrorsUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(.text.emergencyInit)
</UL>
<P><STRONG><a name="[61]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pdo.o(.text.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.sendOnePDOevent)
</UL>
<P><STRONG><a name="[62]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pdo.o(.text.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.sendOnePDOevent)
</UL>
<P><STRONG><a name="[b7]"></a>PDOInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, pdo.o(.text.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[ba]"></a>PDOStop</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pdo.o(.text.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ProducerHearbeatAlarm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lifegrd.o(.text.ProducerHearbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProducerHearbeatAlarm &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(.text.heartbeatInit)
</UL>
<P><STRONG><a name="[90]"></a>PropCurrentSmooth</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, propdriver.o(.text.PropCurrentSmooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PropCurrentSmooth
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>PropDriverPwmUpdate</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, drvpwm.o(.text.PropDriverPwmUpdate))
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopAInit)
</UL>
<P><STRONG><a name="[ae]"></a>ReadLevelFromEeprom</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, batterymeter.o(.text.ReadLevelFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadLevelFromEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
</UL>

<P><STRONG><a name="[e7]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, objacces.o(.text.RegisterSetODentryCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[60]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, sdo.o(.text.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDOTimeoutAlarm &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdo.o(.text.initSDOline)
<LI> sdo.o(.text.proceedSDO)
</UL>
<P><STRONG><a name="[be]"></a>SDOlineToObjdict</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdo.o(.text.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[c0]"></a>SDOtoLine</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, sdo.o(.text.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDOtoLine &rArr; realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SetAlarm</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, timer_canfestival.o(.text.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[64]"></a>SyncAlarm</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sync.o(.text.SyncAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SyncAlarm &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(.text.startSYNC)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Handler &rArr; vNetTimerUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNetTimerUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 484 bytes, Stack size 4 bytes, system_gd32f30x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f30x_it.o(.text.TIMER0_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gd32f30x_it.o(.text.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_capture_value_register_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32_timer_canfestival.o(.text.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER5_IRQHandler &rArr; TimeDispatch &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, wdgproc.o(.text.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER6_IRQHandler &rArr; i32LocalDoSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, pdo.o(.text.TPDO_Communication_Parameter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(.text.PDOInit)
</UL>
<P><STRONG><a name="[b]"></a>TestSlave_scanIndexOD</STRONG> (Thumb, 6556 bytes, Stack size 0 bytes, testslave.o(.text.TestSlave_scanIndexOD))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[1]"></a>TestSlave_valueRangeTest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, testslave.o(.text.TestSlave_valueRangeTest))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[cb]"></a>TimeDispatch</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timer_canfestival.o(.text.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimeDispatch &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>USART0_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, uartcom.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8pGetRevBuf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, uartcom.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8pGetRevBuf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, cancom.o(.text.USBD_HP_CAN0_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_HP_CAN0_TX_IRQHandler &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_flag_clear
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, cancom.o(.text.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_it.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = UsageFault_Handler &rArr;  UsageFault_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>WriteLevelToEeprom</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, batterymeter.o(.text.WriteLevelToEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteLevelToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
</UL>

<P><STRONG><a name="[0]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pdo.o(.text._RxPDO_EventTimers_Handler))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[d8]"></a>_getODentry</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, objacces.o(.text._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[6]"></a>_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text._heartbeatError))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[2]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text._initialisation))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[4]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text._operational))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[9]"></a>_post_SlaveBootup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text._post_SlaveBootup))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[a]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(.text._post_SlaveStateChange))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[8]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text._post_TPDO))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[d]"></a>_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text._post_emcy))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[7]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(.text._post_sync))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[3]"></a>_preOperational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text._preOperational))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[b8]"></a>_sendPDOevent</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, pdo.o(.text._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[bf]"></a>_setODentry</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, objacces.o(.text._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[5]"></a>_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(.text._stopped))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[c]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, objacces.o(.text._storeODSubIndex))
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Data)
</UL>
<P><STRONG><a name="[14a]"></a>adc_calibration_enable</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[140]"></a>adc_channel_length_config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[13f]"></a>adc_data_alignment_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[14b]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[149]"></a>adc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[144]"></a>adc_external_trigger_config</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[143]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[145]"></a>adc_inserted_channel_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_inserted_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_inserted_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[8c]"></a>adc_inserted_data_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_inserted_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>adc_interrupt_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[8b]"></a>adc_interrupt_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[13d]"></a>adc_mode_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[146]"></a>adc_oversample_mode_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_oversample_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[147]"></a>adc_oversample_mode_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_oversample_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[141]"></a>adc_regular_channel_config</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, gd32f30x_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[8d]"></a>adc_software_trigger_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>adc_special_function_config</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_special_function_config))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[142]"></a>adc_tempsensor_vrefint_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_adc.o(.text.adc_tempsensor_vrefint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[da]"></a>buildPDO</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, pdo.o(.text.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[db]"></a>canDispatch</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, states.o(.text.canDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevProc
</UL>

<P><STRONG><a name="[bb]"></a>canSend</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32_timer_canfestival.o(.text.canSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanWrite
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHearbeatAlarm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
</UL>

<P><STRONG><a name="[e3]"></a>can_deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f30x_can.o(.text.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
</UL>

<P><STRONG><a name="[14f]"></a>can_filter_init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gd32f30x_can.o(.text.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
</UL>

<P><STRONG><a name="[d4]"></a>can_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_can.o(.text.can_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>can_init</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, gd32f30x_can.o(.text.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
</UL>

<P><STRONG><a name="[150]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_can.o(.text.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
</UL>

<P><STRONG><a name="[d6]"></a>can_interrupt_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_can.o(.text.can_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>can_message_receive</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gd32f30x_can.o(.text.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>can_message_transmit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gd32f30x_can.o(.text.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanWrite
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HP_CAN0_TX_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>can_struct_para_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gd32f30x_can.o(.text.can_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
</UL>

<P><STRONG><a name="[a1]"></a>dma_channel_disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>dma_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart1Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart0Send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>dma_circulation_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_circulation_enable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[13a]"></a>dma_deinit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[13b]"></a>dma_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gd32f30x_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[162]"></a>dma_interrupt_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[a0]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>dma_struct_para_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[d2]"></a>dma_transfer_number_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_transfer_number_config))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart1Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart0Send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>dma_transfer_number_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_dma.o(.text.dma_transfer_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>emergencyInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, emcy.o(.text.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[126]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(.text.emergencyStop))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[e8]"></a>failedSDO</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, sdo.o(.text.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = failedSDO &rArr; sendSDOabort &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[165]"></a>fwdgt_counter_reload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_fwdgt.o(.text.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFeedDog
</UL>

<P><STRONG><a name="[c5]"></a>getElapsedTime</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32_timer_canfestival.o(.text.getElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[11c]"></a>getNodeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, states.o(.text.getNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[e9]"></a>getSDOlineOnUse</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, sdo.o(.text.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[a6]"></a>gpio_bit_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDoProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSetState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[139]"></a>gpio_init</STRONG> (Thumb, 1008 bytes, Stack size 16 bytes, gd32f30x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvDoInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvDiInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[cc]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoFdbVoltageCal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDiProc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>gpio_pin_remap_config</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gd32f30x_gpio.o(.text.gpio_pin_remap_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_remap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[b4]"></a>heartbeatInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lifegrd.o(.text.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = heartbeatInit &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[ec]"></a>heartbeatStop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lifegrd.o(.text.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[ed]"></a>i32CanRead</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, cancom.o(.text.i32CanRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32CanRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevProc
</UL>

<P><STRONG><a name="[e2]"></a>i32CanWrite</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, cancom.o(.text.i32CanWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetCanSendState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[ef]"></a>i32DoPwmSet</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dopwm.o(.text.i32DoPwmSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i32DoPwmSet &rArr; i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[f0]"></a>i32ErrCodeCheck</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, errcode.o(.text.i32ErrCodeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropSetTarget
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DoPwmSet
</UL>

<P><STRONG><a name="[f1]"></a>i32ErrCodeClr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, errcode.o(.text.i32ErrCodeClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32ErrCodeClr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstRevProc
</UL>

<P><STRONG><a name="[cd]"></a>i32ErrCodeSet</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, errcode.o(.text.i32ErrCodeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropErrCallBack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstRevProc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmErrCallBack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiErrCallBack
</UL>

<P><STRONG><a name="[ac]"></a>i32GetPara</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, para.o(.text.i32GetPara))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProcInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSendAlmCode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveManufacturerPara
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveCommunicationPara
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveApplicationPara
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveAllPara
</UL>

<P><STRONG><a name="[8f]"></a>i32GetPropCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, propproc.o(.text.i32GetPropCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>i32LocalAiGet</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, localai.o(.text.i32LocalAiGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i32LocalAiGet &rArr; i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
</UL>

<P><STRONG><a name="[f2]"></a>i32LocalAiGetValue</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, localai.o(.text.i32LocalAiGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i32LocalAiGetValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
</UL>

<P><STRONG><a name="[f3]"></a>i32LocalDiGet</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, localdi.o(.text.i32LocalDiGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32LocalDiGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>i32LocalDoSet</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, localdo.o(.text.i32LocalDoSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32LocalDoSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>i32LogWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, log.o(.text.i32LogWrite))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pPropCurrentLoopGet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PropCurrentSmooth
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgProc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDiGet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevMsgRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartRead
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeClr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropSetTarget
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DoPwmSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanWrite
</UL>

<P><STRONG><a name="[65]"></a>i32SetPara</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, para.o(.text.i32SetPara))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDiProc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSendAlmCode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> para.o(.text.vParaInit)
</UL>
<P><STRONG><a name="[f4]"></a>i32UartRead</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, uartcom.o(.text.i32UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i32UartRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
</UL>

<P><STRONG><a name="[f5]"></a>i32UartWrite</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, uartcom.o(.text.i32UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i32UartWrite &rArr; vDrvUart1Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart1Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUart0Send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetUartSendState
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
</UL>

<P><STRONG><a name="[f7]"></a>initSDOline</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, sdo.o(.text.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initSDOline &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[11f]"></a>lineToSDO</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, sdo.o(.text.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 1208 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = main &rArr; vCanRevProc &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgProc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetNetTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorProc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vParaInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNetTimerInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLogInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDoProc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDiProc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedProc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevProc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBeepProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorProc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAlarmLampProc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProcInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetEepromFlag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDiGet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[11a]"></a>masterSendNMTstateChange</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nmtmaster.o(.text.masterSendNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[9a]"></a>nvic_irq_enable</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, gd32f30x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[14c]"></a>nvic_priority_group_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f30x_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[11b]"></a>objdictToSDOline</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, sdo.o(.text.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = objdictToSDOline &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[8e]"></a>pPropCurrentLoopGet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, propdriver.o(.text.pPropCurrentLoopGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pPropCurrentLoopGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>proceedEMCY</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, emcy.o(.text.proceedEMCY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[e1]"></a>proceedNMTstateChange</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, nmtslave.o(.text.proceedNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[df]"></a>proceedNODE_GUARD</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, lifegrd.o(.text.proceedNODE_GUARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = proceedNODE_GUARD &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[dc]"></a>proceedPDO</STRONG> (Thumb, 844 bytes, Stack size 96 bytes, pdo.o(.text.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = proceedPDO &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[dd]"></a>proceedSDO</STRONG> (Thumb, 5608 bytes, Stack size 64 bytes, sdo.o(.text.proceedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[de]"></a>proceedSYNC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sync.o(.text.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[138]"></a>rcu_adc_clock_config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, gd32f30x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[12b]"></a>rcu_clock_freq_get</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, gd32f30x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[97]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>

<P><STRONG><a name="[e5]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f30x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[e4]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[120]"></a>resetSDO</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, sdo.o(.text.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = resetSDO &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[11e]"></a>resetSDOline</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdo.o(.text.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = resetSDOline &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[b9]"></a>scanIndexOD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, objacces.o(.text.scanIndexOD))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[b6]"></a>sendOnePDOevent</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, pdo.o(.text.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[11d]"></a>sendSDO</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sdo.o(.text.sendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendSDO &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[ea]"></a>sendSDOabort</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, sdo.o(.text.sendSDOabort))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sendSDOabort &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
</UL>

<P><STRONG><a name="[9d]"></a>setNodeId</STRONG> (Thumb, 434 bytes, Stack size 28 bytes, states.o(.text.setNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[9e]"></a>setState</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, states.o(.text.setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[c6]"></a>setTimer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32_timer_canfestival.o(.text.setTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_value_config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[124]"></a>slaveSendBootUp</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nmtslave.o(.text.slaveSendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; i32CanWrite &rArr; can_message_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[15a]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(.text.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
</UL>

<P><STRONG><a name="[a9]"></a>spi_i2s_data_receive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_spi.o(.text.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[a8]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_spi.o(.text.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[a7]"></a>spi_i2s_flag_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_spi.o(.text.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[159]"></a>spi_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gd32f30x_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
</UL>

<P><STRONG><a name="[b2]"></a>startSYNC</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sync.o(.text.startSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = startSYNC &rArr; SetAlarm &rArr; setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[125]"></a>stopSYNC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sync.o(.text.stopSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[122]"></a>switchCommunicationState</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, states.o(.text.switchCommunicationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[f8]"></a>systick_config</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, systick.o(.text.systick_config))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[ca]"></a>timer_channel_capture_value_register_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_channel_capture_value_register_read))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>timer_channel_output_config</STRONG> (Thumb, 524 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_channel_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[155]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[154]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[156]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[eb]"></a>timer_counter_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_counter_read))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>

<P><STRONG><a name="[123]"></a>timer_counter_value_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_counter_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[98]"></a>timer_deinit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, gd32f30x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[9c]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>

<P><STRONG><a name="[99]"></a>timer_init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, gd32f30x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[9b]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
</UL>

<P><STRONG><a name="[c9]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_UP_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_UP_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_master_output_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[157]"></a>timer_primary_output_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_timer.o(.text.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
</UL>

<P><STRONG><a name="[bc]"></a>u16EepromRead</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, eeprom.o(.text.u16EepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLevelToEeprom
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLevelFromEeprom
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vParaInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHourCountWrite
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32HourCountRead
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16ReadParaFromEeprom
</UL>

<P><STRONG><a name="[ad]"></a>u16EepromWrite</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, eeprom.o(.text.u16EepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u16EepromWrite &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLevelToEeprom
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vParaInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSendAlmCode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHourCountWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16ReadParaFromEeprom
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveManufacturerPara
</UL>

<P><STRONG><a name="[127]"></a>u16ReadParaFromEeprom</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, para.o(.text.u16ReadParaFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = u16ReadParaFromEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vParaInit
</UL>

<P><STRONG><a name="[128]"></a>u16SaveParaToEeprom</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, para.o(.text.u16SaveParaToEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = u16SaveParaToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveCommunicationPara
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveApplicationPara
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32SaveAllPara
</UL>

<P><STRONG><a name="[16e]"></a>u16pGetParaPoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, para.o(.text.u16pGetParaPoint))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTestSlaveSetObjict
</UL>

<P><STRONG><a name="[129]"></a>u32HourCountRead</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, hourcount.o(.text.u32HourCountRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = u32HourCountRead &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[169]"></a>u8ErrCodeGet</STRONG> (Thumb, 652 bytes, Stack size 0 bytes, errcode.o(.text.u8ErrCodeGet))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstRevProc
</UL>

<P><STRONG><a name="[175]"></a>u8GetBatterySoc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, batterymeter.o(.text.u8GetBatterySoc))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[ee]"></a>u8GetCanSendState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvcan.o(.text.u8GetCanSendState))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanWrite
</UL>

<P><STRONG><a name="[117]"></a>u8GetEepromFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eeprom.o(.text.u8GetEepromFlag))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>u8GetNetTimerOverFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nettimer.o(.text.u8GetNetTimerOverFlag))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>u8GetNetTimerStartFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nettimer.o(.text.u8GetNetTimerStartFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
</UL>

<P><STRONG><a name="[f6]"></a>u8GetUartSendState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drvuart.o(.text.u8GetUartSendState))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartWrite
</UL>

<P><STRONG><a name="[d1]"></a>u8pGetRevBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drvuart.o(.text.u8pGetRevBuf))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>usart_baudrate_set</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gd32f30x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[cf]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>usart_deinit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gd32f30x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[160]"></a>usart_dma_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[161]"></a>usart_dma_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[163]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[15d]"></a>usart_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[15e]"></a>usart_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[ce]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[15c]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(.text.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
</UL>

<P><STRONG><a name="[173]"></a>vAiErrReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aiproc.o(.text.vAiErrReg))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[10e]"></a>vAiProc</STRONG> (Thumb, 680 bytes, Stack size 8 bytes, aiproc.o(.text.vAiProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vAiProc &rArr; i32LocalAiGetValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerStartFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>vAiProcInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, aiproc.o(.text.vAiProcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vAiProcInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>vAlarmLampProc</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, alarmlampproc.o(.text.vAlarmLampProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vAlarmLampProc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>vAngleSensorInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, anglesensor.o(.text.vAngleSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vAngleSensorInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>vAngleSensorProc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, anglesensor.o(.text.vAngleSensorProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vAngleSensorProc &rArr; i32LocalAiGet &rArr; i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>vBatteryProc</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, batterymeter.o(.text.vBatteryProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = vBatteryProc &rArr; WriteLevelToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLevelToEeprom
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLevelFromEeprom
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryManage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>vBeepProc</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, beepproc.o(.text.vBeepProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vBeepProc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>vBspInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, drvbsp.o(.text.vBspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vBspInit &rArr; vDrvUartInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvUartInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvSpiInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvPwmInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvDoInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvDiInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvCanInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrvAdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>vCanRevMsgRegister</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, canrevproc.o(.text.vCanRevMsgRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vCanRevMsgRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[10b]"></a>vCanRevProc</STRONG> (Thumb, 1632 bytes, Stack size 56 bytes, canrevproc.o(.text.vCanRevProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vCanRevProc &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanRead
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>vDoFdbVoltageCal</STRONG> (Thumb, 646 bytes, Stack size 24 bytes, dopwm.o(.text.vDoFdbVoltageCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vDoFdbVoltageCal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>vDoPwmErrReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dopwm.o(.text.vDoPwmErrReg))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[fe]"></a>vDoPwmInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dopwm.o(.text.vDoPwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vDoPwmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>vDoPwmProc</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, dopwm.o(.text.vDoPwmProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vDoPwmProc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDiGet
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerStartFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPwmDriver
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24div
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>vDrvAdInit</STRONG> (Thumb, 614 bytes, Stack size 56 bytes, drvad.o(.text.vDrvAdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vDrvAdInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_flag_clear
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempsensor_vrefint_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_oversample_mode_enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_oversample_mode_config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_mode_config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt_enable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_inserted_channel_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[134]"></a>vDrvCanInit</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, drvcan.o(.text.vDrvCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vDrvCanInit &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_struct_para_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[12f]"></a>vDrvDiInit</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, drvdi.o(.text.vDrvDiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vDrvDiInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[12e]"></a>vDrvDoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drvdo.o(.text.vDrvDoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vDrvDoInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[132]"></a>vDrvPwmInit</STRONG> (Thumb, 1038 bytes, Stack size 56 bytes, drvpwm.o(.text.vDrvPwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vDrvPwmInit &rArr; gpio_pin_remap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[131]"></a>vDrvSpiInit</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, drvspi.o(.text.vDrvSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vDrvSpiInit &rArr; spi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[a3]"></a>vDrvUart0Send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drvuart.o(.text.vDrvUart0Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vDrvUart0Send
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartWrite
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>vDrvUart1Send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drvuart.o(.text.vDrvUart1Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vDrvUart1Send
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>vDrvUartInit</STRONG> (Thumb, 818 bytes, Stack size 64 bytes, drvuart.o(.text.vDrvUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vDrvUartInit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_remap_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_struct_para_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBspInit
</UL>

<P><STRONG><a name="[105]"></a>vEepromNoBlockWriteProc</STRONG> (Thumb, 842 bytes, Stack size 32 bytes, eeprom.o(.text.vEepromNoBlockWriteProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vEepromNoBlockWriteProc &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerStartFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>vEepromSetCallBack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eeprom.o(.text.vEepromSetCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vParaInit
</UL>

<P><STRONG><a name="[164]"></a>vFeedDog</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.text.vFeedDog))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgProc
</UL>

<P><STRONG><a name="[166]"></a>vHourCountWrite</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, hourcount.o(.text.vHourCountWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vHourCountWrite &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[107]"></a>vKillNetTimer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nettimer.o(.text.vKillNetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>vLedProc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ledproc.o(.text.vLedProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vLedProc &rArr; vLedSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>vLedSendAlmCode</STRONG> (Thumb, 534 bytes, Stack size 8 bytes, ledproc.o(.text.vLedSendAlmCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vLedSendAlmCode &rArr; u16EepromWrite &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[167]"></a>vLedSetState</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, led.o(.text.vLedSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vLedSetState
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedProc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSendAlmCode
</UL>

<P><STRONG><a name="[10a]"></a>vLocalDiProc</STRONG> (Thumb, 1014 bytes, Stack size 24 bytes, localdi.o(.text.vLocalDiProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vLocalDiProc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>vLocalDoProc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, localdo.o(.text.vLocalDoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vLocalDoProc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>vLogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(.text.vLogInit))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>vMstRevRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mstslvcom.o(.text.vMstRevRegister))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[170]"></a>vMstSendRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mstslvcom.o(.text.vMstSendRegister))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[110]"></a>vMstSlvComProc</STRONG> (Thumb, 652 bytes, Stack size 56 bytes, mstslvcom.o(.text.vMstSlvComProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMstSlvComProc &rArr; i32UartWrite &rArr; vDrvUart1Send
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8ErrCodeGet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>vNetTimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nettimer.o(.text.vNetTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vNetTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>vNetTimerUpdate</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, nettimer.o(.text.vNetTimerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vNetTimerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fa]"></a>vParaInit</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, para.o(.text.vParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vParaInit &rArr; u16ReadParaFromEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromSetCallBack
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16ReadParaFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>vParaSaveStateUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testslave.o(.text.vParaSaveStateUpdate))
<BR>[Address Reference Count : 1]<UL><LI> para.o(.text.vParaInit)
</UL>
<P><STRONG><a name="[102]"></a>vPressureSensorInit</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, pressuresensor.o(.text.vPressureSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vPressureSensorInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>vPressureSensorProc</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, pressuresensor.o(.text.vPressureSensorProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPressureSensorProc &rArr; i32LocalAiGet &rArr; i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>vPropCurrentLoopInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, propdriver.o(.text.vPropCurrentLoopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vPropCurrentLoopInit &rArr; vPropCurrentLoopAInit &rArr; vPropCurrentPidInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProcInit
</UL>

<P><STRONG><a name="[172]"></a>vPropErrReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, propproc.o(.text.vPropErrReg))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[10d]"></a>vPropProc</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, propproc.o(.text.vPropProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vPropProc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDiGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerStartFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8ErrCodeGet
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>vPropProcInit</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, propproc.o(.text.vPropProcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = vPropProcInit &rArr; vPropCurrentLoopInit &rArr; vPropCurrentLoopAInit &rArr; vPropCurrentPidInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>vPropSetTarget</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, propproc.o(.text.vPropSetTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPropSetTarget &rArr; i32ErrCodeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
</UL>

<P><STRONG><a name="[136]"></a>vPwmDriver</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, drvpwm.o(.text.vPwmDriver))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
</UL>

<P><STRONG><a name="[108]"></a>vResetNetTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nettimer.o(.text.vResetNetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>vSetNetTimer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nettimer.o(.text.vSetNetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSetNetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>vSetPdoPara</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, testslave.o(.text.vSetPdoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vSetPdoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuInit
</UL>

<P><STRONG><a name="[a2]"></a>vSetUartSendState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvuart.o(.text.vSetUartSendState))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>vTestSlaveSetObjict</STRONG> (Thumb, 3892 bytes, Stack size 8 bytes, testslave.o(.text.vTestSlaveSetObjict))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTestSlaveSetObjict
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16pGetParaPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canopen_int
</UL>

<P><STRONG><a name="[103]"></a>vUserEcuInit</STRONG> (Thumb, 968 bytes, Stack size 104 bytes, user_jiali_q20ga.o(.text.vUserEcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vUserEcuInit &rArr; u32HourCountRead &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetNetTimer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDoSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevMsgRegister
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiErrReg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSendRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstRevRegister
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropErrReg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32HourCountRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetPdoPara
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmErrReg
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>vUserEcuProc</STRONG> (Thumb, 1976 bytes, Stack size 40 bytes, user_jiali_q20ga.o(.text.vUserEcuProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vUserEcuProc &rArr; i32LocalAiGetValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetBatterySoc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWdgSetFun
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vResetNetTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKillNetTimer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GetNetTimerOverFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalDiGet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8ErrCodeGet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedSendAlmCode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropSetTarget
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vHourCountWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DoPwmSet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CanWrite
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>vWdgInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wdgproc.o(.text.vWdgInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vWdgInit &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>vWdgProc</STRONG> (Thumb, 600 bytes, Stack size 16 bytes, wdgproc.o(.text.vWdgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vWdgProc &rArr; i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LogWrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFeedDog
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeClr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>vWdgSetFun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wdgproc.o(.text.vWdgSetFun))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUserEcuProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPressureSensorProc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMstSlvComProc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDoProc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLocalDiProc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRevProc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBeepProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBatteryProc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAngleSensorProc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAlarmLampProc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAiProc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>_IQ24div</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNdiv.o(_IQ24div))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
</UL>

<P><STRONG><a name="[93]"></a>_IQ24mpy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNmpy.o(_IQ24mpy))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryManage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDoPwmProc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattery
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidCalc
</UL>

<P><STRONG><a name="[bd]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
</UL>

<P><STRONG><a name="[c2]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
</UL>

<P><STRONG><a name="[189]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c1]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>vAiErrCallBack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, user_jiali_q20ga.o(.text.vAiErrCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vAiErrCallBack &rArr; i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P><STRONG><a name="[74]"></a>vCanId112Proc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, user_jiali_q20ga.o(.text.vCanId112Proc))
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.rodata..L__const.vUserEcuInit.CanId112)
</UL>
<P><STRONG><a name="[71]"></a>vDoPwmErrCallBack</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, user_jiali_q20ga.o(.text.vDoPwmErrCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vDoPwmErrCallBack &rArr; i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P><STRONG><a name="[6f]"></a>vMstRevProc</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, user_jiali_q20ga.o(.text.vMstRevProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vMstRevProc &rArr; i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8ErrCodeGet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P><STRONG><a name="[70]"></a>vMstSendProc</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, user_jiali_q20ga.o(.text.vMstSendProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vMstSendProc &rArr; i32LocalAiGetValue &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32LocalAiGetValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32SetPara
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P><STRONG><a name="[72]"></a>vPropErrCallBack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user_jiali_q20ga.o(.text.vPropErrCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPropErrCallBack &rArr; i32ErrCodeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ErrCodeSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_jiali_q20ga.o(.text.vUserEcuInit)
</UL>
<P><STRONG><a name="[a5]"></a>EepromRead</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, eeprom.o(.text.EepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEepromNoBlockWriteProc
</UL>

<P><STRONG><a name="[aa]"></a>EepromWrite</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, eeprom.o(.text.EepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
</UL>

<P><STRONG><a name="[6b]"></a>vPropCurrentFilterCalc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, propdriver.o(.text.vPropCurrentFilterCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPropCurrentFilterCalc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopAInit)
</UL>
<P><STRONG><a name="[6a]"></a>vPropCurrentFilterInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, propdriver.o(.text.vPropCurrentFilterInit))
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopAInit)
</UL>
<P><STRONG><a name="[6c]"></a>vPropCurrentLoopAInit</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, propdriver.o(.text.vPropCurrentLoopAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vPropCurrentLoopAInit &rArr; vPropCurrentPidInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentPidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopInit)
</UL>
<P><STRONG><a name="[6d]"></a>vPropCurrentLoopCalc</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, propdriver.o(.text.vPropCurrentLoopCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPropCurrentLoopCalc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopInit)
</UL>
<P><STRONG><a name="[6e]"></a>vPropCurrentLoopReset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, propdriver.o(.text.vPropCurrentLoopReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPropCurrentLoopReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopInit)
</UL>
<P><STRONG><a name="[68]"></a>vPropCurrentPidCalc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, propdriver.o(.text.vPropCurrentPidCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = vPropCurrentPidCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopAInit)
</UL>
<P><STRONG><a name="[67]"></a>vPropCurrentPidInit</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, propdriver.o(.text.vPropCurrentPidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = vPropCurrentPidInit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24div
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPropCurrentLoopAInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> propdriver.o(.text.vPropCurrentLoopAInit)
</UL>
<P><STRONG><a name="[e]"></a>u32SaveAllPara</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testslave.o(.text.u32SaveAllPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u32SaveAllPara &rArr; u16SaveParaToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Index1010_callbacks)
</UL>
<P><STRONG><a name="[10]"></a>u32SaveApplicationPara</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testslave.o(.text.u32SaveApplicationPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u32SaveApplicationPara &rArr; u16SaveParaToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Index1010_callbacks)
</UL>
<P><STRONG><a name="[f]"></a>u32SaveCommunicationPara</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testslave.o(.text.u32SaveCommunicationPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = u32SaveCommunicationPara &rArr; u16SaveParaToEeprom &rArr; u16EepromRead &rArr; EepromRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16SaveParaToEeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Index1010_callbacks)
</UL>
<P><STRONG><a name="[11]"></a>u32SaveManufacturerPara</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, testslave.o(.text.u32SaveManufacturerPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u32SaveManufacturerPara &rArr; u16EepromWrite &rArr; EepromWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16EepromWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GetPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testslave.o(.data.TestSlave_Index1010_callbacks)
</UL>
<P><STRONG><a name="[177]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
